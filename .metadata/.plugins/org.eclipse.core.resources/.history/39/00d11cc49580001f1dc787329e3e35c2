package com.sweeti.gateway.controller;

import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.security.oauth2.client.OAuth2AuthorizedClient;
import org.springframework.security.oauth2.client.annotation.RegisteredOAuth2AuthorizedClient;
import org.springframework.security.oauth2.core.oidc.user.OidcUser;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.sweeti.gateway.models.AuthResponse;

@RestController
@RequestMapping("/auth")
public class AuthController {
    private Logger logger = LoggerFactory.getLogger(AuthController.class);

    @GetMapping("/login")
    public ResponseEntity<AuthResponse> login(@RegisteredOAuth2AuthorizedClient("okta") OAuth2AuthorizedClient client, OidcUser user, Model model) {
        logger.info("User email id: {}", user.getEmail());

        // Creating AuthResponse object
        AuthResponse authResponse = new AuthResponse();

        // Setting email to authResponse
        authResponse.setUserId(user.getEmail());

        // Setting Access Token to authResponse
        authResponse.setAccessToken(client.getAccessToken().getTokenValue());

        // Setting Refresh Token to authResponse
        if (client.getRefreshToken() != null) {
            authResponse.setRefreshToken(client.getRefreshToken().getTokenValue());
        }

        // Setting Expiry Time to authResponse
        authResponse.setExpireAt(client.getAccessToken().getExpiresAt().getEpochSecond());

        // Setting Authorities to authResponse
        authResponse.setAuthorities(user.getAuthorities().stream()
                .map(grantedAuthority -> grantedAuthority.getAuthority())
                .collect(Collectors.toList()));

        // Returning the response with OK status
        return ResponseEntity.ok(authResponse);
    }
}
